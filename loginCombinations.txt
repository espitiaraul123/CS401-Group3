adminbanker,0,banker,yes
pizzaman,crusty,
FernandoHerrera,2,banker,no
//verify that the username exists.
				/*try {
					BufferedReader reader = new BufferedReader(new FileReader("loginCombinations.txt"));
					
					//read until line is found
					String line;
					boolean success = false;
					while((line = reader.readLine()) != null) {
						//only read the current string until the first coma to compare usernames and passwords
						String values[] = line.split(",");
						//if the username and password are found, return customer data to the client
						//AND IF THE USER ISN'T CURRENTLY LOGGED IN
						if (values[0].equals(recievedLoginInfo.getText()) && values[3].equals("no")) {
							success = true;
							loginLine = line;
							System.out.println("user has been found");
							//send the line accross
							recievedLoginInfo.setStatus(MsgStatus.Success);
							recievedLoginInfo.setText(line);
							objOutputStream.writeObject(recievedLoginInfo);
							//since the user is active, change activity to yes
							values[3] = "yes";
							line = String.join(",",values);
							//write the string back to the file.
							
							Path path = Paths.get("loginCombinations.txt");
						    List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
						    //values[1] is the line number, but we must turn it into an int
						    int lineNumber = Integer.parseInt(values[1]);
						    
						    lines.set(lineNumber, line);
						    Files.write(path, lines, StandardCharsets.UTF_8);
						}
						
					}
					///if the user was not found, return the message marked as a failure to the client
					if (success == false) {
						System.out.println("user has not been found");
						recievedLoginInfo.setStatus(MsgStatus.Failure);
						objOutputStream.writeObject(recievedLoginInfo);
						reader.close();
						return;
					}
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				//if the login info was succefully fetched, now fetch all the customers
				if (loginLine != null) {
					getAllCustomersFromFile();
				}
				
				
				//switch the status back to not active
				String values[] = loginLine.split(",");
				
				values[3] = "no";
				loginLine = String.join(",",values);
				//write the string back to the file.
				
				Path path = Paths.get("loginCombinations.txt");
			    List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
			    //values[1] is the line number, but we must turn it into an int
			    int lineNumber = Integer.parseInt(values[1]);
			    
			    lines.set(lineNumber, loginLine);
			    Files.write(path, lines, StandardCharsets.UTF_8);
			*/
			